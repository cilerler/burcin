name: Build on push

on:
  workflow_dispatch:
  push:
    branches:
    - master
    paths:
    - '.github/workflows/build_on_push.yml'
    - 'src/Burcin.*/**'

jobs:

  build:
    if: github.event_name == 'push' && contains(toJson(github.event.commits), '***NO_CI***') == false && contains(toJson(github.event.commits), '[ci skip]') == false && contains(toJson(github.event.commits), '[skip ci]') == false
    runs-on: ubuntu-latest

    env:
      buildConfiguration: 'Release'
      buildNumber: '1.0'
      projectFile: './src/Burcin.Host/Burcin.Host.csproj'
      projectTestFile: './test/Burcin.Host.Tests/Burcin.Host.Tests.csproj'

    steps:
      - uses: actions/checkout@v2

      - name: Extract metadata
        run: |
          echo "buildNumber=$buildNumber.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "##[set-output name=branchsafe;]$(echo ${GITHUB_REF#refs/heads/} | sed -r 's/[/]+/-/g')"
          echo "##[set-output name=repository;]$(echo ${GITHUB_REPOSITORY#*/})"
        id: extract_metadata

      - name: Set NuGet credentials
        shell: pwsh
        run: |
          ./tools/Set-NuGetCredentials.ps1 -ConfigFile ./nuget.config -Source github -Username ${{github.actor}} -Password ${{ secrets.GITHUB_TOKEN }}
          ./tools/Set-NuGetCredentials.ps1 -ConfigFile ./nuget.config -Source azure -Username ${{github.actor}} -Password ${{ secrets.AZURE_DEVOPS_PAT }}

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.x

      - name: Restore
        run: dotnet restore $projectFile
      - name: Build
        run: dotnet build $projectFile --configuration $buildConfiguration -p:BuildNumber=$buildNumber
      - name: Test
        run: dotnet test $projectTestFile --configuration $buildConfiguration -p:CollectCoverage=true
        continue-on-error: true
      - name: Publish
        run: dotnet publish $projectFile --configuration $buildConfiguration --no-restore --no-build --output ./artifacts/staging
      - name: Pack
        run: dotnet pack $projectFile --configuration $buildConfiguration --no-restore --no-build --output ./artifacts/packages

      - name: Publish artifacts (staging)
        uses: actions/upload-artifact@master
        with:
          name: staging
          path: ./artifacts/staging

      - name: Publish artifacts (packages)
        uses: actions/upload-artifact@master
        with:
          name: packages
          path: ./artifacts/packages
          retention-days: 30

      - name: Publish artifacts (output)
        uses: actions/upload-artifact@master
        if: failure()
        with:
          name: output
          path: ./
          retention-days: 30

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{env.buildNumber}}
          release_name: ${{env.buildNumber}}
          draft: false
          prerelease: true
          body: |
            [Changelog](https://github.com/${{github.repository}}/blob/${{ steps.extract_metadata.outputs.branch }}/CHANGELOG.md)

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/packages/${{github.workflow}}.${{env.buildNumber}}.nupkg
          asset_name: ${{github.workflow}}.${{env.buildNumber}}.nupkg
          asset_content_type: application/zip

      - name: Push to GitHub Packages
        run: dotnet nuget push './artifacts/packages/*.nupkg' --skip-duplicate --source "github" --api-key ${GITHUB_TOKEN}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Push to Nuget
        run: dotnet nuget push './artifacts/packages/*.nupkg' --skip-duplicate --source "nuget" --api-key ${NUGET_API_KEY}
        env:
          NUGET_API_KEY: ${{secrets.NUGET_API_KEY}}

      # - uses: actions/delete-package-versions@v1
      #   with:
      #     package-name: 'Burcin.Domain'
      #     num-old-versions-to-delete: 3

      # - name: Tag commit
      #   uses: tvdias/github-tagger@v0.0.1
      #   with:
      #     repo-token: "${{ secrets.GITHUB_TOKEN }}"
      #     tag: v${{env.buildNumber}}

      # - name: Delete latest release
      #   uses: ame-yu/action-delete-latest-release@v2
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}

      # - name: FTP-Deploy-Action
      #   uses: SamKirkland/FTP-Deploy-Action@3.1.1
      #   with:
      #     ftp-server: ftps://server:port/
      #     ftp-username: ${{ secrets.FTP_USERNAME_DOTNETSERVICES }}
      #     ftp-password: ${{ secrets.FTP_PASSWORD_DOTNETSERVICES }}
      #     git-ftp-args: --insecure # if your certificate is setup correctly this can be removed
      #     local-dir: artifact/packages
      #     remote-root: /publish/github-actions
      #.git-ftp-include
      #.git-ftp-ignore

      # - name: Upload FTP
      #   uses: sebastianpopp/ftp-action@releases/v2
      #   with:
      #     host: server:port
      #     user: ${{ secrets.FTP_USERNAME_DOTNETSERVICES }}
      #     password: ${{ secrets.FTP_PASSWORD_DOTNETSERVICES }}
      #     localDir: artifact/packages
      #     remoteDir: /publish/github-actions

