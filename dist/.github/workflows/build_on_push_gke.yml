name: Build and Deploy to GKE

on:
  push:
    branches:
    - master

env:
  GITHUB_SHA: ${{ github.sha }}
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_EMAIL: ${{ secrets.GKE_EMAIL }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GCP_REGISTRY_HOSTNAME: ${{ secrets.GCP_REGISTRY_HOSTNAME }}
  NAMESPACE: default
  IMAGE: github.com
  METADATA_NAME: REPOSITORY-BRANCH
  DEPLOYMENT_NAME: REPOSITORY-BRANCH-APPLICATION_NAME
  APPLICATION_NAME: burcin
  PROJECTPATH: 'src/Burcin.Host'
  BUILDNUMBER: '1.0'

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    if: github.event_name == 'push' && contains(toJson(github.event.commits), '***NO_CI***') == false && contains(toJson(github.event.commits), '[ci skip]') == false && contains(toJson(github.event.commits), '[skip ci]') == false
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Extract metadata
      run: |
          echo ::set-env name=BUILDNUMBER::$BUILDNUMBER.${GITHUB_RUN_NUMBER}
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "##[set-output name=repository;]$(echo ${GITHUB_REPOSITORY#*/})"
      id: extract_metadata

    - name: Initial modifications
      run: |
          echo "1. Update NuGet credentials"
          sed -i "s/GITHUB_USERNAME/${{github.actor}}/g;s/GITHUB_TOKEN/${{secrets.GITHUB_TOKEN}}/g;s/AZURE_USERNAME/${{github.actor}}/g;s/AZURE_DEVOPS_PAT/${{secrets.AZURE_DEVOPS_PAT}}/g;" nuget.config
          echo "2. Set Environment Variables"
          echo ::set-env name=IMAGE::$GCP_REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE/$GITHUB_REPOSITORY
          echo ::set-env name=METADATA_NAME::${{ steps.extract_metadata.outputs.repository }}-${{ steps.extract_metadata.outputs.branch }}
          echo ::set-env name=DEPLOYMENT_NAME::${{ steps.extract_metadata.outputs.repository }}-${{ steps.extract_metadata.outputs.branch }}-${APPLICATION_NAME}
          echo "3. Generate BuildInfo file"
          echo "${GITHUB_REPOSITORY}_${{ steps.extract_metadata.outputs.branch }}:${GITHUB_SHA}"$'\n'"v${BUILDNUMBER}" | tee ${PROJECTPATH}/Resources/BuildInfo.txt

    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '270.0.0'
        service_account_email: ${{ secrets.GKE_EMAIL }}
        service_account_key: ${{ secrets.GKE_KEY }}

    - run: |
        gcloud auth configure-docker

    - name: Build
      run: |
        docker build -t $IMAGE:latest \
          -t $IMAGE:$GITHUB_SHA \
          -f $PROJECTPATH/Dockerfile \
          --build-arg BUILDNUMBER="$BUILDNUMBER" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" .

    - name: Publish
      run: |
        docker push $IMAGE:$GITHUB_SHA
        docker push $IMAGE:latest

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{env.BUILDNUMBER}}
        release_name: ${{env.BUILDNUMBER}}
        draft: false
        prerelease: false
        body: |
          [Changelog](https://github.com/${{github.repository}}/blob/${{ steps.extract_metadata.outputs.branch }}/CHANGELOG.md)

    - name: Set up Kustomize
      run: |
        cd ./tools/Kubernetes
        curl -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    - name: Deploy
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GKE_PROJECT
        cd ./tools/Kubernetes
        sed -i "s/\$(APPLICATION_NAME)/$APPLICATION_NAME/g;" *.yaml
        ./kustomize edit set nameprefix "${METADATA_NAME}-"
        ./kustomize edit set namespace $NAMESPACE
        ./kustomize edit set image IMAGE=$IMAGE:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f -

    - name: Verify
      continue-on-error: true
      run: |
        kubectl rollout status -n $NAMESPACE deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide

    - name: Debug Artifacts
      if: failure()
      run: |
        cat nuget.config
        cd ./tools/Kubernetes
        cat kustomization.yaml
        ./kustomize build .

#       kubectl set image -n $NAMESPACE deployment/$DEPLOYMENT_NAME $DEPLOYMENT_NAME=$IMAGE:$GITHUB_SHA
